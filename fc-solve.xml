<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>fc-solve(6)</title>
<date>2018-10-27</date>
<author>
<personname>
<firstname>Shlomi</firstname>
<surname>Fish</surname>
</personname>
<email>shlomif@cpan.org</email>
</author>
<authorinitials>SF</authorinitials>
</info>
<refmeta>
<refentrytitle>fc-solve</refentrytitle>
<manvolnum>6</manvolnum>
<refmiscinfo class="source">&#160;</refmiscinfo>
<refmiscinfo class="manual">&#160;</refmiscinfo>
</refmeta>
<refnamediv>
<refname>fc-solve</refname>
<refpurpose>automated solver for Freecell and related Solitiare variants</refpurpose>
</refnamediv>
<refsection xml:id="intro">
<title>Introduction</title>
<simpara>This is Freecell Solver version 5.0.x, a program that automatically
solves most layouts of Freecell, and similar Solitaire variants as
well as those of Simple Simon.</simpara>
<simpara>Freecell Solver is distributed under the MIT/Expat License
( <link xl:href="http://en.wikipedia.org/wiki/MIT_License">http://en.wikipedia.org/wiki/MIT_License</link> ), a free, permissive,
open-source license.</simpara>
<simpara>Note that the Freecell Solver source and Win32 binary distributions <emphasis role="strong">do not</emphasis>
provide a graphical user-interface (GUI) and are primarily meant to be used
by Solitaire researchers and software developers. If you&#8217;re looking for a
suitable GUI based on Freecell Solver, see our links at:</simpara>
<simpara><link xl:href="http://fc-solve.shlomifish.org/links.html#front_ends">http://fc-solve.shlomifish.org/links.html#front_ends</link></simpara>
<simpara>I hope you&#8217;ll enjoy using Freecell Solver, and make the best of it.</simpara>
<simpara>&#8201;&#8212;&#8201;Shlomi Fish ( <link xl:href="http://www.shlomifish.org/">http://www.shlomifish.org/</link> )</simpara>
</refsection>
<refsection xml:id="build">
<title>Building</title>
<simpara>Read the file <literal>INSTALL.txt</literal> for information on how to do that.</simpara>
</refsection>
<refsection xml:id="usage">
<title>Usage</title>
<simpara>The program is called "fc-solve". You invoke it like this:</simpara>
<literallayout class="monospaced">fc-solve board_file</literallayout>
<simpara>board_file is the filename with a valid Freecell startup board. The file is
built as follows:</simpara>
<simpara>It has the 8 Freecell stacks.</simpara>
<simpara>Each stack contains its cards separated by a whitespace
and terminated with a newline character( it&#8217;s important that the last stack
will also be terminated with a newline !). The cards in the line are ordered
from the topmost card (= the card right on the virtual table and the one with
the most cards placed on it) in the left, to the bottommost card in the right
(= the card with no other cards placed on it).</simpara>
<simpara>A card string contains the rank of the card followed by its suit.
The card number is one of: <literal>A,1,2,3,4,5,6,7,8,9,10,J,Q,K</literal>. Alternatively,
<literal>T</literal> can be used instead of <literal>10</literal>. The card suit is one of:  <literal>H,S,D,C</literal> (standing
for Hearts, Spades, Diamonds and Clubs respectively).</simpara>
<simpara>Here is an example board: (PySol/Microsoft board No. 24)</simpara>
<screen>4C 2C 9C 8C QS 4S 2H
5H QH 3C AC 3H 4H QD
QC 9S 6H 9H 3S KS 3D
5D 2S JC 5C JH 6D AS
2D KD 10H 10C 10D 8D
7H JS KH 10S KC 7C
AH 5S 6S AD 8H JD
7S 6C 7D 4D 8S 9D</screen>
<simpara>Visually, it appears as this:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="http://fc-solve.shlomifish.org/images/pysol-freecell-ms24.png"/>
</imageobject>
<textobject><phrase>Freecell Deal No. 24</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>As can be seen, the four of clubs (4C), five of hearts (5H), etc. are at the
bottom of the stacks and the start of the lines in the board input.</simpara>
<simpara>And another one: (PySol board No. 198246790)</simpara>
<screen>KD JH 5H 7D 9H KC 9D
3H JD 5D 8H QH 7H 2D
4D 3S QC 3C 6S QS KS
10C 9S 6D 9C QD 8S 10D
10S 8C 7S 10H 2C AS
8D AC AH 4H JC 4C
6H 7C 4S 5S 5C JS
AD KH 6C 2H 3D 2S</screen>
<simpara>Starting from Freecell Solver 3.14.x, a stack can also start with a leading
colon (":"). This is to allow input from states as output by Freecell Solver
using the -p option.</simpara>
<simpara>You can specify the contents of the freecells by prefixing the line with
"FC:" or with "Freecells:". For example:</simpara>
<screen>FC: 3H QC</screen>
<simpara>will specify that the cards 3 of hearts and queen of clubs are present in
the freecells. To specify an empty freecell use a "-" as its designator.</simpara>
<simpara>If there&#8217;s another "FC:" line, the previous line will be overridden.</simpara>
<simpara>You can specify the contents of the foundations by prefixing the line with
"Founds:" or with "Foundations:" and then using a format as follows:</simpara>
<screen>Founds: H-5 C-A S-0 D-K</screen>
<simpara>Hence, the suit ID followed by a dash followed by the card number in the
foundation. A suit that is not present will be assumed to be 0. Again, if
there&#8217;s more than one line like that, then the previous lines will be
ignored and overridden.</simpara>
<simpara>The program will stop processing the input as soon as it read 8 lines of
standard stacks. Therefore, it is recommended that the foundations and
freecells lines will come at the beginning of the file.</simpara>
<simpara>The program will process the board and try to solve it. If it succeeds it
will output the states from the initial board to its final solution to the
standard output. If it fails, it will notify it.</simpara>
<simpara>For information about the various command-line switches that Freecell
Solver accepts, read the <literal>USAGE.txt</literal> file in this directory.</simpara>
<simpara>To solve Simple Simon boards append <literal>--game simple_simon</literal> right after
the "fc-solve" program name.</simpara>
</refsection>
<refsection xml:id="board_gen_programs">
<title>The board generation programs</title>
<simpara>Several programs which can generate the initial boards of various Freecell
implementations can be found in the "board_gen/" sub-directory. Read the
<literal>README.txt</literal> file there for details on how they can be compiled and used.</simpara>
<simpara>In any case, they can save you the time of inputting the board yourself.</simpara>
</refsection>
<refsection xml:id="complete_examples">
<title>Some complete examples for layouts</title>
<simpara>A layout in the middle of the MS Freecell deal No. 109 solution:</simpara>
<screen>Foundations: H-6 C-9 D-2 S-0
Freecells:  QS  3S  2S  KD
: 8H 3D
: KS QD JC
: AS 8D TD 7D JH TS 9D
: 7S 6D
: 5S
: KH QC JD TC 9H 8S 7H 6S 5D 4S
: KC QH JS TH 9S
: 4D</screen>
<simpara>Similar, but with an empty Freecell:</simpara>
<screen>Foundations: H-6 C-9 D-2 S-0
Freecells:  QS  3S  -  KD
: 8H 3D 2S
: KS QD JC
: AS 8D TD 7D JH TS 9D
: 7S 6D
: 5S
: KH QC JD TC 9H 8S 7H 6S 5D 4S
: KC QH JS TH 9S
: 4D</screen>
<simpara>Likewise, only without leading colons where unnecessary:</simpara>
<screen>Foundations: H-6 C-9 D-2 S-0
Freecells:  QS  3S  -  KD
8H 3D 2S
KS QD JC
AS 8D TD 7D JH TS 9D
7S 6D
5S
KH QC JD TC 9H 8S 7H 6S 5D 4S
KC QH JS TH 9S
4D</screen>
</refsection>
<refsection xml:id="how_to_read_sol">
<title>How to read the solutions</title>
<simpara>The file <literal>USAGE.txt</literal> covers all of Freecell Solverâ€™s command line options,
but it may be too exhaustive for casual users. As a result, here is a shorter
tutorial. First of all whenever invoking <literal>fc-solve</literal> one should add the
flags <literal>-p -t -sam -sel</literal> which will make the solution easier to understand. Then,
assuming the board could be successfully solved, one will be given the layouts
in the solution (in the format given above) vis-a-vis with the moves as the
string. Note that the indexes of the resources given in the moves are
0-based rather than the more natural 1-based notation.</simpara>
</refsection>
<refsection xml:id="_the_programs">
<title>The programs</title>
<simpara>Most command-line switches have two versions:</simpara>
<itemizedlist>
<listitem>
<simpara>A short POSIX one which is a dash followed by a letter or a few. This option
must come standalone and not clustered:  <literal>-sam</literal> is not equivalent to
specifying <literal>-s</literal>, <literal>-a</literal> and <literal>-m</literal>.</simpara>
</listitem>
<listitem>
<simpara>A long switch which is two dashes followed by the command string. For
example: <literal>--prelude</literal>, <literal>--st-name</literal>.</simpara>
</listitem>
</itemizedlist>
<simpara>If command line arguments have parameters, they are followed in separate
parameters - Freecell Solver won&#8217;t recognise a parameter preceded by an equal
sign. <literal>--st-name=myname</literal> is invalid, while <literal>--st-name myname</literal> is OK.</simpara>
<refsection xml:id="scope_of_the_opts">
<title>The Scope of the Options</title>
<simpara>The scope of the options is mentioned along with them. Options can be:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Global - affects all the soft-threads.</simpara>
</listitem>
<listitem>
<simpara>Instance-specific - affects an instance (separated by the <literal>--next-instance</literal>
option below). Each instance consists of several flares.</simpara>
</listitem>
<listitem>
<simpara>Flare-specific - affects the current flare (separated by the <literal>--next-flare</literal>
option below. Each flare consists of several hard threads.</simpara>
</listitem>
<listitem>
<simpara>Hard-thread-specific - affects the current hard thread (separated by
the <literal>--next-hard-thread</literal> option below. Each hard thread consists of several
soft threads.</simpara>
</listitem>
<listitem>
<simpara>Soft-thread-specific - affects only the current soft thread.</simpara>
</listitem>
</orderedlist>
</refsection>
</refsection>
<refsection xml:id="getting_help">
<title>Getting Help</title>
<refsection xml:id="help_flag">
<title>-h , --help</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option displays a help text on the screen. This help gives a help
display summarizing some ways to use the program and get more help.</simpara>
</refsection>
<refsection xml:id="version_flag">
<title>--version</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option displays the version number of the components that make
the executable (and then exits).</simpara>
</refsection>
<refsection xml:id="help-configs_flag">
<title>--help-configs</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Some help on the various configurations of Freecell Solver.</simpara>
</refsection>
<refsection xml:id="help-options_flag">
<title>--help-options</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>A help screen giving an overview of all available options.</simpara>
</refsection>
<refsection xml:id="help-real-help_flag">
<title>--help-real-help</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Explains how to change the default help screen to a different one.</simpara>
</refsection>
<refsection xml:id="help-short-sol_flag">
<title>--help-short-sol</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>How to generate shorter solutions.</simpara>
</refsection>
<refsection xml:id="help-summary_flag">
<title>--help-summary</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>The default help screen.</simpara>
</refsection>
</refsection>
<refsection xml:id="output_options">
<title>Output Options</title>
<refsection xml:id="parseable-output_flag">
<title>-p , --parseable-output</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option will display the columns in a format that can be more easily
manipulated by text-processing programs such as grep or perl. Namely,
The freecells will be displayed in one line, and the foundations in a
separate line. Plus, Each column will be displayed horizontally, in its
own line, while beginning with a <literal>:</literal>.</simpara>
</refsection>
<refsection xml:id="display-10-as-t_flag">
<title>-t , --display-10-as-t</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option will display the 10 cards as a capital <literal>T +instead of a +10</literal>.
Thus, the cards will be more properly aligned.</simpara>
<simpara>For example, here is a command line using <literal>-p</literal> and <literal>-t</literal>:</simpara>
<screen>$ pi-make-microsoft-freecell-board 24 | fc-solve -p -t
-=-=-=-=-=-=-=-=-=-=-=-

Foundations: H-0 C-0 D-0 S-0
Freecells:
: 4C 2C 9C 8C QS 4S 2H
: 5H QH 3C AC 3H 4H QD
: QC 9S 6H 9H 3S KS 3D
: 5D 2S JC 5C JH 6D AS
: 2D KD TH TC TD 8D
: 7H JS KH TS KC 7C
: AH 5S 6S AD 8H JD
: 7S 6C 7D 4D 8S 9D


====================

Foundations: H-0 C-0 D-0 S-A
Freecells:
: 4C 2C 9C 8C QS 4S 2H
: 5H QH 3C AC 3H 4H QD
: QC 9S 6H 9H 3S KS 3D
: 5D 2S JC 5C JH 6D
: 2D KD TH TC TD 8D
: 7H JS KH TS KC 7C
: AH 5S 6S AD 8H JD
: 7S 6C 7D 4D 8S 9D</screen>
</refsection>
<refsection xml:id="canonized-order-output_flag">
<title>-c , --canonized-order-output</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Freecell Solver re-arranges the stacks and freecells in a given state
according to their first card. It keeps their actual position in a
separate place, but internally it uses their canonized place. Use
this option, if you want Freecell Solver to display them in that order.
One should be warned that that way the place of a given stack in the
board will not be preserved throughout the solution.</simpara>
</refsection>
<refsection xml:id="display-moves_flag">
<title>-m , --display-moves</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option will display the moves instead of the intermediate states.
Each move will be displayed in a separate line, in a format that is
human-readable, but that can also be parsed and analyzed by a computer
program with some effort on the programmer&#8217;s part.</simpara>
<simpara>For example:</simpara>
<screen>$ pi-make-microsoft-freecell-board 24 | fc-solve -m | head -30
-=-=-=-=-=-=-=-=-=-=-=-

Move a card from stack 3 to the foundations

====================

Move a card from stack 6 to freecell 0

====================

Move a card from stack 6 to freecell 1</screen>
</refsection>
<refsection xml:id="standard-notation_flag">
<title>-sn , --standard-notation</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option will display the moves in standard notation in which every
move consists of two characters and there are ten moves in a line. Naturally,
this option will only become apparent if the display moves is specified.
(it does not implicitly specify it, though).</simpara>
<simpara>For more information regarding standard notation refer to the following
web-page:</simpara>
<simpara><link xl:href="http://home.earthlink.net/~fomalhaut/freecell.html">http://home.earthlink.net/~fomalhaut/freecell.html</link></simpara>
</refsection>
<refsection xml:id="standard-notation-extended_flag">
<title>-snx , --standard-notation-extended</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option is similar to the previous one, except that when a sequence
move is made to an empty stack with more than one card in the sequence,
the move will be followed with "v" and the number of cards moved in
hexadecimal.</simpara>
</refsection>
<refsection xml:id="display-states-and-moves_flag">
<title>-sam , --display-states-and-moves</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option will display both the intermediate states and the moves that
are needed to move from one to another. The standard notation
option applies to it to.</simpara>
<screen>$ pi-make-microsoft-freecell-board 24 | fc-solve -sam -p -t | head -50
-=-=-=-=-=-=-=-=-=-=-=-

Foundations: H-0 C-0 D-0 S-0
Freecells:
: 4C 2C 9C 8C QS 4S 2H
: 5H QH 3C AC 3H 4H QD
: QC 9S 6H 9H 3S KS 3D
: 5D 2S JC 5C JH 6D AS
: 2D KD TH TC TD 8D
: 7H JS KH TS KC 7C
: AH 5S 6S AD 8H JD
: 7S 6C 7D 4D 8S 9D


====================

Move a card from stack 3 to the foundations

Foundations: H-0 C-0 D-0 S-A
Freecells:
: 4C 2C 9C 8C QS 4S 2H
: 5H QH 3C AC 3H 4H QD
: QC 9S 6H 9H 3S KS 3D
: 5D 2S JC 5C JH 6D
: 2D KD TH TC TD 8D
: 7H JS KH TS KC 7C
: AH 5S 6S AD 8H JD
: 7S 6C 7D 4D 8S 9D


====================

Move a card from stack 6 to freecell 0

Foundations: H-0 C-0 D-0 S-A
Freecells:  JD
: 4C 2C 9C 8C QS 4S 2H
: 5H QH 3C AC 3H 4H QD
: QC 9S 6H 9H 3S KS 3D
: 5D 2S JC 5C JH 6D
: 2D KD TH TC TD 8D
: 7H JS KH TS KC 7C
: AH 5S 6S AD 8H
: 7S 6C 7D 4D 8S 9D


====================

Move a card from stack 6 to freecell 1</screen>
</refsection>
<refsection xml:id="display-parent-iter_flag">
<title>-pi , --display-parent-iter</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option (assuming the -s and -i options are specified) will also
display the iteration index of the state from which the current state
was derived. This is especially useful for BeFS (so-called <literal>a-star</literal>) or
BFS scans.</simpara>
</refsection>
<refsection xml:id="output_flag">
<title>-o [filename] , --output [filename]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Outputs to a file instead of standard output. So for example:</simpara>
<screen>$ fc-solve -o 2405.solution.txt 2405.board</screen>
<simpara>Will put the solution to the file in 2405.board in the file
<literal>2405.solution.txt</literal> . This will also be done using:</simpara>
<screen>$ fc-solve --output 2405.solution.txt 2405.board</screen>
</refsection>
<refsection xml:id="show-exceeded-limits_flag">
<title>-sel , --show-exceeded-limits</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option will display a different status message ("Iterations count
exceeded.") instead of "I could not solve this game." in case the iterations
count was exceeded. This is recommended because the "I could not solve this
game." message can also mean that the entire game graph was fully traversed
(within the limitations of the specified moves' types) and so no solution
is possible.</simpara>
<simpara>This option is not the default, to retain compatibility with previous versions
of Freecell Solver, and was added in version 3.12.0 of fc-solve.</simpara>
</refsection>
<refsection xml:id="hint-on-intractable_flag">
<title>-hoi , --hint-on-intractable</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Presents the moves to the intermediate reached state, if the maximal number
of iterations was reached without a conclusion (= "intractable").</simpara>
<simpara>This option is not the default, to retain compatibility with previous versions
of Freecell Solver, and was added in version 4.20.0 of fc-solve.</simpara>
</refsection>
</refsection>
<refsection xml:id="game_variants_options">
<title>Game Variants Options</title>
<refsection xml:id="freecells-num_flag">
<title>--freecells-num [Number of Freecells]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option specifies the number of freecells which are available to
the program. Freecell Solver can use any number of freecells as long as
it does not exceed its maximal number.</simpara>
<simpara>This maximum is hard-coded into the program, and can be specified at
compile-time by modifying the file <literal>config.h</literal>. See the file <literal>INSTALL</literal>
(or alternatively <literal>INSTALL.html</literal>) for details.</simpara>
</refsection>
<refsection xml:id="stacks-num_flag">
<title>--stacks-num [Number of Stacks]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option specifies the number of stacks present in the board. Again,
this number cannot exceed the maximal number of stacks, which can be
specified in the file <literal>config.h</literal> during compile-time of Freecell
Solver.</simpara>
</refsection>
<refsection xml:id="decks-num_flag">
<title>--decks-num [Number of Decks]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This options specifies how many decks are found in the board. This number
cannot exceed the maximal number of decks, which can be specified by the
Freecell Solver build system.</simpara>
</refsection>
<refsection xml:id="sequences-are-built-by_flag">
<title>--sequences-are-built-by {suit|alternate_color|rank}</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option specifies whether a card sequence is built by suit or by
alternate colour or by rank regardless of suit.</simpara>
</refsection>
<refsection xml:id="sequence-move_flag">
<title>--sequence-move {limited|unlimited}</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option specifies whether the sequence move is limited by the
number of freecells or vacant stacks or not.</simpara>
</refsection>
<refsection xml:id="empty-stacks-filled-by_flag">
<title>--empty-stacks-filled-by {kings|none|all}</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Specifies which cards can fill an empty stack.</simpara>
</refsection>
<refsection xml:id="game_flag">
<title>--game [game] , --preset [game] , -g [game]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Specifies the type of game. Each preset implies several of the
settings options above and sometimes even the movesâ€™ order below. The
default configuration is for Freecell.</simpara>
<simpara>Available presets:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="50%"?>
<?dbfo table-width="50%"?>
<?dblatex table-width="50%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="107*"/>
<colspec colname="col_2" colwidth="107*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>bakers_dozen</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Baker&#8217;s Dozen</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>bakers_game</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Baker&#8217;s Game</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>beleaguered_castle</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Beleaguered Castle</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>citadel</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Citadel</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cruel</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Cruel</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>der_katz</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Der Katzenschwanz</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>die_schlange</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Die Schlange</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>eight_off</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Eight Off</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fan</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Fan</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>forecell</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Forecell</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>freecell</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Freecell (default)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>good_measure</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Good Measure</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>ko_bakers_game</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Kings' Only Baker&#8217;s Game</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>relaxed_freecell</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Relaxed Freecell</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>relaxed_sehaven</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Relaxed Seahaven Towers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>seahaven</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Seahaven Towers</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>simple_simon</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Simple Simon</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>streets_and_alleys</literal></simpara></entry>
<entry align="left" valign="top"><simpara>Streets and Alleys</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Note: in order to solve Der Katzenschwanz and Die Schlange I recommend you
compile Freecell Solver with the INDIRECT_STACK_STATES option, or else it will
consume much more memory. For details consult the file INSTALL.</simpara>
</refsection>
<refsection xml:id="game_flag_examples">
<title>Examples</title>
<simpara>To solve PySol Eight Off game No. 1,000 type:</simpara>
<screen>$ make_pysol_freecell_board.py 1000 eight_off | fc-solve -g eight_off</screen>
<simpara>To solve PySol Baker&#8217;s Game No. 50, type:</simpara>
<screen>$ make_pysol_freecell_board.py 50 bakers_game | fc-solve -g bakers_game</screen>
<simpara>If you want to solve a game similar to Freecell only with sequences built
by rank, and unlimited sequence move, do:</simpara>
<screen>$ fc-solve -g freecell --sequences-are-built-by rank --sequence-move unlimited</screen>
</refsection>
</refsection>
<refsection xml:id="solving_algorithm_options">
<title>Solving Algorithm Options</title>
<refsection xml:id="max-iters_flag">
<title>-mi [Iterations num] , --max-iters [Iterations num]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This parameter limits the maximal number of states to check. This will
give a rough limit on the time spent to solve a given board.</simpara>
</refsection>
<refsection xml:id="max-depth_flag">
<title>-md [Maximal depth] , --max-depth [Maximal depth]</title>
<simpara><emphasis role="strong">Not currently implemented</emphasis></simpara>
<simpara>Freecell Solver recurses into the solution. This parameter specifies a
maximal recursion depth. Generally speaking, it&#8217;s not a good idea to
set it, because that way several important intermediate states may become
inaccessible.</simpara>
</refsection>
<refsection xml:id="max-stored-states_flag">
<title>-mss [num] , --max-stored-states [num]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Limits the number of the states stored by the program in the computer&#8217;s
memory. This differs from the maximal number of iterations in the sense, that
it is possible that a stored state was not checked yet.</simpara>
</refsection>
<refsection xml:id="trim-max-stored-states_flag">
<title>-tmss [num] , --trim-max-stored-states [num]</title>
<simpara><emphasis role="strong">Instance-wide</emphasis></simpara>
<simpara>This also limits the number of trimmed stored states, but this time will
try to trim them once the limit has been reached (which is time consuming
and may cause states to be traversed again in the future).</simpara>
</refsection>
<refsection xml:id="tests-order_flag">
<title>-to [Movesâ€™ Order] , --tests-order [Moves Order]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>This option specifies the order in which Freecell Solver will try the different
types of moves (formerly termed "tests") that it can perform. Each move is
specified by one character, and they are performed in the order in which they
appear in the parameter string. You can omit moves by not including their
corresponding characters in the string.</simpara>
<simpara>The moves along with their characters are:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<?dbhtml table-width="80%"?>
<?dbfo table-width="80%"?>
<?dblatex table-width="80%"?>
<tgroup cols="2">
<colspec colname="col_1" colwidth="31*"/>
<colspec colname="col_2" colwidth="309*"/>
<tbody>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara>Freecell Moves:</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>0</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>put top stack cards in the foundations.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>1</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>put freecell cards in the foundations.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>2</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>put freecell cards on top of stacks.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>3</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>put non-top stack cards in the foundations.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>4</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move stack cards to different stacks.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>5</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move stack cards to a parent card on the same stack.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>6</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move sequences of cards onto free stacks.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>7</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>put freecell cards on empty stacks.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>8</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move cards to a different parent.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>9</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>empty an entire stack into the freecells.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>j</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>put freecell cards on empty stacks and right away put cards on top.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara>Atomic Freecell Moves:</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>A</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a stack card to an empty stack.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>B</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a stack card to a parent on a different stack.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>C</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a stack card to a freecell.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>D</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a freecell card to a parent.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>E</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a freecell card to an empty stack.</simpara></entry>
</row>
<row>
<entry align="left" valign="top" namest="col_1" nameend="col_2"><simpara>Simple Simon Moves:</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>a</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a full sequence to the foundations.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>b</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a sequence to a true parent of his.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>c</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a whole stack sequence to a false parent (in order to clear the stack)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>d</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a sequence to a true parent that has some cards above it.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>e</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a sequence with some cards above it to a true parent.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>f</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a sequence with a junk sequence above it to a true parent that
has some cards above it.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>g</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a whole stack sequence to a false parent which has some
cards above it.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>h</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move a sequence to a parent on the same stack.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis>i</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>move any sequence to a false parent (using it may make the solution
much slower).</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Manipulating the moves order can be very helpful to the quick solution
of a given board. If you found that a certain board cannot be solved in
after a long time or in a certain maximal number of iterations, you
should try different moves' orders. Usually, one can find a moves order
that solves a board very quickly.</simpara>
<simpara>Note that this moves order usually makes sense only for the Soft-DFS
and Random DFS scans (see the <literal>--method</literal> option below).</simpara>
<simpara>Also note that Freecell moves are not suitable for solving Simple Simon games
and Simple Simon moves are not suitable for solving anything except Simple
Simon.</simpara>
<simpara>Moves can be grouped together into groups using parenthesis
(e.g: "(0123)") or square brackets ("[012][3456789]"). Such grouping is
only relevant to the Random DFS scan (see below). A group may optionally
be followed by the equal sign "=" and by an ordering specifier. If one
specifies "=rand()", then the derived states will be randomised based on the
seed (which is what happens if no equal sign is specified). On the other
hand, if one specifies something like "=asw(5,0,5,0,0,5)", then the numbers
inside the parentheses will be treated as weights for the same ordering
function used by the <literal>-asw</literal> flag (see below).</simpara>
</refsection>
<refsection xml:id="depth-tests-order2_flag">
<title>-dto2 [Min Depth],[Moves' Order] , --depth-tests-order2 [Min Depth],[Moves' Order]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>Sets the Moves' order starting from the minimal depth onwards. This way, if
a Soft-DFS scan recurses deeply into the game, it will use a different moves'
order.</simpara>
<simpara>Note that if you set the moves' order of a minimal depth of say 50, then it
will override all the moves' order of 50 and above. As a result, it is
recommended that you set the minimal depth moves order in an increasing
depth.</simpara>
<simpara>It should be noted that the <literal>-to</literal> or <literal>--tests-order</literal> option above is
equivalent to using this option with a minimal depth of 0.</simpara>
<simpara>Here are some examples:</simpara>
<screen>-to 0123456789 -dto2 30,0138924567</screen>
<simpara>This sets the moves' order to <literal>0123456789</literal> for all depths below 30 and to
<literal>0138924567</literal> for all depths above it.</simpara>
<screen>-to 0123457 -dto2 10,750123 -dto2 25,710235</screen>
<simpara>This sets the moves' order to <literal>0123457</literal> for depths -9 (those below 10),
to <literal>750123</literal> for depths 10-24, and to <literal>710235</literal> for the depths 25 onwards.</simpara>
<screen>-to 0123457 -dto2 "10,[012357]=asw(1)"</screen>
<simpara>This sorts the moves starting from 10 onward based on the asw() function.</simpara>
<screen>-to 0123457 -dto2 "10,[012357]=rand()"</screen>
<simpara>This randomises the moves from 10 onward.</simpara>
<screen>-to 0123457 -dto2 "10,[012357]"</screen>
<simpara>This does the same thing as the previous example.</simpara>
<simpara><emphasis role="strong">Note</emphasis> : This option should be used instead of the older <literal>-dto</literal> option given
below which mutilates the moves order parameter and is still provided for
backward compatibility.</simpara>
</refsection>
<refsection xml:id="depth-tests-order_flag">
<title>-dto [Min Depth],[Moves' Order] , --depth-tests-order [Min Depth],[Moves' Order]</title>
<simpara>This is equivalent to specifying <literal>-dto2 [Min Depth],[Min Depth],[Moves' Order]</literal>
- i.e: the "[Min Depth]," string is prefixed to the given moves order.</simpara>
<simpara>This option is provided for backward compatibility with older versions of
Freecell Solver.</simpara>
</refsection>
<refsection xml:id="method_flag">
<title>-me [Solving Method] , --method [Solving Method]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>This option specifies the solving method that will be used to solve the
board. Currently, the following methods are available:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>a-star</literal> - A Best-First-Search scan (not "A*" as it was once thought to be)</simpara>
</listitem>
<listitem>
<simpara><literal>bfs</literal> - A Breadth-First Search (or BFS) scan</simpara>
</listitem>
<listitem>
<simpara><literal>dfs</literal> - A Depth-First Search (or DFS) scan</simpara>
</listitem>
<listitem>
<simpara><literal>random-dfs</literal> - A randomized DFS scan</simpara>
</listitem>
<listitem>
<simpara><literal>patsolve</literal> - uses the scan of patsolve.</simpara>
</listitem>
<listitem>
<simpara><literal>soft-dfs</literal> - A "soft" DFS scan</simpara>
</listitem>
</itemizedlist>
<simpara>Starting from recent Freecell Solver versions there is no difference between
<literal>dfs</literal> and <literal>soft-dfs</literal>. In earlier versions, use of <literal>soft-dfs</literal> is recommended.
<literal>random-dfs</literal> is similar to <literal>soft-dfs</literal> only it determines to which states to
recurse into randomly. Its behaviour will differ depending on the seed you
supply to it.  (see the "-seed" option below.)</simpara>
<simpara>BFS does not yield good results, and <literal>a-star</literal> has a mixed behaviour, so for
the time being I recommend using Soft-DFS or Random-DFS.</simpara>
<simpara>The Random-DFS scan processes every moves' random group, randomizes the
states that it found and recurses into them one by one. Standalone moves
that do not belong to any group, are processed in a non-random manner.</simpara>
</refsection>
<refsection xml:id="a-star-weight_flag">
<title>-asw [BeFS Weights] , --a-star-weight [BeFS Weights]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>Specify weights for the <literal>a-star</literal> (= "Best-First Search") scan, assuming it is
used. The parameter should be a comma-separated list of numbers, each one is
proportional to the weight of its corresponding test.</simpara>
<simpara>The numbers are, in order:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>The number of cards out.</simpara>
</listitem>
<listitem>
<simpara>The maximal sequence move.</simpara>
</listitem>
<listitem>
<simpara>The number of cards under sequences.</simpara>
</listitem>
<listitem>
<simpara>The length of the sequences which are found over renegade cards.</simpara>
</listitem>
<listitem>
<simpara>The depth of the board in the solution.</simpara>
</listitem>
<listitem>
<simpara>The negative of the number of cards that are not placed above their
parents. To get the irreversibility depth, give equal weight to this weight
and to the number of cards out.</simpara>
</listitem>
</orderedlist>
<simpara>The default weights are respectively: {0.5, 0, 0.3, 0, 0.2, 0}</simpara>
</refsection>
<refsection xml:id="seed_flag">
<title>-seed [Seed Number]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>Specifies a seed to be used by Freecell Solver&#8217;s internal random number
generator. This seed may alter the behaviour and speed of the <literal>random-dfs</literal>
scan.</simpara>
</refsection>
<refsection xml:id="set-pruning_flag">
<title>--set-pruning [Pruning] , -sp [Pruning]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>This option sets the pruning algorithm for the soft thread. Current valid
values are only the empty string (<literal>""</literal>) for no pruning and <literal>r:tf</literal> (short
for "Run: to foundations") for Horne&#8217;s rule. See:</simpara>
<simpara><link xl:href="https://groups.yahoo.com/neo/groups/fc-solve-discuss/conversations/topics/214">https://groups.yahoo.com/neo/groups/fc-solve-discuss/conversations/topics/214</link></simpara>
</refsection>
<refsection xml:id="optimize-solution_flag">
<title>-opt , --optimize-solution</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>This option instructs Freecell Solver to try and optimize the solution
path so it will have a smaller number of moves.</simpara>
</refsection>
<refsection xml:id="optimization-tests-order_flag">
<title>-opt-to [moves order] , --optimization-tests-order [moves order]</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>This argument specifies the moves order for the optimization scan, in case
it should be different than an order that contains all the moves that were
used in all the normal scans.</simpara>
</refsection>
<refsection xml:id="reparent-states_flag">
<title>--reparent-states</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>This option specifies that states that were encountered whose depth in the
states graph can be improved should be reparented to the new parent. This
option can possibly make solutions shorter.</simpara>
</refsection>
<refsection xml:id="calc-real-depth_flag">
<title>--calc-real-depth</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>This option becomes effective only if <literal>--reparent-states</literal> is specified. What
it does, is explicitly calculate the depth of the state by tracing its path
to the initial state. This may make depth consideration more accurate.</simpara>
</refsection>
<refsection xml:id="patsolve-x-param_flag">
<title>--patsolve-x-param [pos],[value]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>Sets the patsolveâ€™s scan X param (an integer) in position "pos" into "value".</simpara>
<simpara>Examples:</simpara>
<screen>--patsolve-x-param 0,5
--patsolve-x-param 2,100</screen>
</refsection>
<refsection xml:id="patsolve-y-param_flag">
<title>--patsolve-y-param [pos],[value]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>Sets the patsolve Y param (a floating point number) in position "pos" into
"value".</simpara>
<simpara>Examples:</simpara>
<screen>--patsolve-y-param 0,0.5
--patsolve-y-param 1,103.2</screen>
</refsection>
</refsection>
<refsection xml:id="running_several_scans_in_parallel">
<title>Running Several Scans in Parallel</title>
<simpara>Starting from Version 2.4.0, Freecell Solver can run several scans in
parallel on the same state collection. Each scan resides in its own
"Soft Thread". By specifying several soft threads on the command line
one can create use several parallel scans. Once one of the scans
reaches a solution, the solution will be displayed.</simpara>
<refsection xml:id="next-soft-thread_flag">
<title>-nst , --next-soft-thread</title>
<simpara><emphasis role="strong">Hard-thread-specific</emphasis></simpara>
<simpara>This option creates a new soft-thread and makes the following scan-specific
options initialize it. For example:</simpara>
<screen>$ fc-solve --method a-star -nst --method soft-dfs -to 0123467 myboard.txt</screen>
<simpara>will run an BeFS scan and a Soft-DFS scan with a moves order of 0123467 on
myboard.txt.</simpara>
</refsection>
<refsection xml:id="soft-thread-step_flag">
<title>-step [Step] , --soft-thread-step [Step]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>This option will set the number of iterations with which to run the
soft thread before switching to the next one. By specifying a larger
step, one can give a certain scan a longer run-time and a higher priority.</simpara>
<simpara><emphasis role="strong">Note:</emphasis> after some experimentation, we have concluded that the <literal>--prelude</literal>
option normally yields better results, but <literal>-step</literal> can be used as a fallback.</simpara>
</refsection>
<refsection xml:id="next-hard-thread_flag">
<title>-nht , --next-hard-thread</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>This argument lets one initialize the next hard thread. If Freecell Solver was
compiled with such support, then it is possible to run each hard thread in its
own system thread. Each hard-thread contains one or more soft threads.</simpara>
</refsection>
<refsection xml:id="st-name_flag">
<title>--st-name [soft thread name]</title>
<simpara><emphasis role="strong">Soft-thread-specific</emphasis></simpara>
<simpara>This argument sets the name used to identify the current soft thread. This name
can later be used to construct the prelude (see below).</simpara>
</refsection>
<refsection xml:id="prelude_flag">
<title>--prelude [\i1@st1{,\i2@st2{,\i3@st3&#8230;&#8203;}}]</title>
<simpara><emphasis role="strong">Hard-thread-specific</emphasis></simpara>
<simpara>Sets the prelude for the hard thread. At the beginning of the search, the
hard thread plays a static sequence of iterations at each of the soft threads
specified in the prelude, for the number of iterations specified.</simpara>
<simpara>For example, if you had three soft threads named "foo", "bar" and "rin", then
the following prelude:</simpara>
<screen>--prelude 500@foo,1590@bar,100@foo,200@rin</screen>
<simpara>Will run 500 iterations in "foo", then 1590 in "bar", then 100 in "foo" again,
and then 200 in "rin". After the prelude finishes, the hard thread would
run the scans one after the other in the sequence they were defined for their
step number.</simpara>
</refsection>
<refsection xml:id="scans-synergy_flag">
<title>--scans-synergy {none|dead-end-marks}</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>Specifies the synergy between the various scans, or how much they cooperate
between themselves. <literal>none</literal> means they do not cooperate and only share
the same memory resources. <literal>dead-end-marks</literal> means they try to mark states
that they have withdrawn from, and states whose all their derived states are
such, as "dead ends". This may or may not improve the speed of the solution.</simpara>
</refsection>
<refsection xml:id="next-instance_flag">
<title>-ni , --next-instance</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option allows one to run two or more separate solvers one after the
other. If the first one returned an unsolvable verdict, then the second
one would run and so on. One use of it is to run an atomic moves scan
after a meta-moves scan, so we will always get an accurate verdict and
still enjoy some of the speed benefits of the meta-moves scan.</simpara>
</refsection>
<refsection xml:id="next-flare_flag">
<title>-nf , --next-flare</title>
<simpara><emphasis role="strong">Instance-wide</emphasis></simpara>
<simpara>Each instance contains several flares. Flares are various alternative scans,
that are ran one after another, as specified in the <literal>--flares-plan</literal> below
or defaulting to running only the first flare (which isn&#8217;t very useful). Out
of all the flares that are successful in solving a board, Freecell Solver
picks the one with the shortest solution.</simpara>
</refsection>
<refsection xml:id="flare-name_flag">
<title>--flare-name [flare name]</title>
<simpara><emphasis role="strong">Flare-wide</emphasis></simpara>
<simpara>This is a name that identifies the flare for use in the flares' plan.</simpara>
</refsection>
<refsection xml:id="flares-plan_flag">
<title>--flares-plan [flare plan]</title>
<simpara><emphasis role="strong">Instance-wide</emphasis></simpara>
<simpara>This instance-wide parameter gives a plan for the flares as a big string. Here
are some examples:</simpara>
<screen>--flares-plan "RunIndef:FlareyFlare"</screen>
<simpara>This plan will run the flare with the name <literal>FlareyFlare</literal> indefinitely, until it
terminates. Once a RunIndef action is encountered, the rest of the plan is
ignored.</simpara>
<screen>--flares-plan "Run:500@MyFlare,Run:2000@FooFlare"</screen>
<simpara>Runs <literal>MyFlare</literal> for 500 iterations and <literal>FooFlare</literal> for 2,000
iterations. Note that both flares will be run and won&#8217;t share any resources
between them, and then the minimal solution out of both flares (or only
those that finished ). If no flares finished, then Freecell Solver will run
them both again for the same number of iterations each, until at least one
finishes (or it ran out of the iterations' limit).</simpara>
<screen>--flares-plan "Run:500@dfs,Run:1500@befs,CP:,Run:10000@funky"</screen>
<simpara>This runs the flares identified by <literal>dfs</literal> and <literal>befs</literal> and then see if a solution
was reached ("CP:" stands for <emphasis role="strong">"checkpoint"</emphasis>), and if so yield it. If both
flares did not reach a solution yet, or failed to solve the board, it will run
the flare <literal>funky</literal> for 10,000 iterations and yield its solution. And like the
previous case, this solution will loop after it ended for as long as the
no flare solved the board or the program did not run out of iterations.</simpara>
<simpara>Using checkpoints one can yield a possibly sub-optimal (as far as solution
length is concerned) solution that will still solve faster than letting all
the flares run.</simpara>
</refsection>
<refsection xml:id="flares-choice_flag">
<title>--flares-choice [choice]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This dictates how to choose the winning flare based on if more than one yielded
a solution. Possible options are:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><literal>--flares-choice fc_solve</literal> - the default, which picks up the solutions based
on the length of the solution in Freecell Solver&#8217;s moves.</simpara>
</listitem>
<listitem>
<simpara><literal>--flares-choice fcpro</literal> - picks up the shortest solution based on the
number of Freecell Pro moves, while not considering implicit moves to the
foundations using Horne&#8217;s Prune / Raymond Prune.</simpara>
</listitem>
</orderedlist>
</refsection>
<refsection xml:id="flares-iters-factor_flag">
<title>-fif [factor] , --flares-iters-factor [factor]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Sets a global, floating-point number, factor to multiply all the iterations
counts in the flares plans. The higher it is, the longer the scans will take,
but there is a greater chance more of them will succeed, and, as a result,
the solution may be shorter.</simpara>
<simpara>As an example, the following:</simpara>
<screen>--flares-plan "Run:500@MyFlare,Run:2000@FooFlare" --flares-iters-factor 2</screen>
<simpara>Is equivalent to:</simpara>
<screen>--flares-plan "Run:1000@MyFlare,Run:4000@FooFlare"</screen>
<simpara>while:</simpara>
<screen>--flares-plan "Run:500@MyFlare,Run:2000@FooFlare" --flares-iters-factor 0.5</screen>
<simpara>Is equivalent to:</simpara>
<screen>--flares-plan "Run:250@MyFlare,Run:1000@FooFlare"</screen>
</refsection>
<refsection xml:id="cache-limit_flag">
<title>--cache-limit [cache limit]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This is a numeric limit to the LRU cache which only matters if Freecell
Solver was compiled with <literal>FCS_RCS_STATES</literal> enabled. This value should be
a positive integer and the higher it is, the more quickly it is likely
that Freecell Solver will run, but it will also consume more memory. (The
entire point of <literal>FCS_RCS_STATES</literal> is to conserve memory).</simpara>
</refsection>
</refsection>
<refsection xml:id="meta-options">
<title>Meta-Options</title>
<refsection xml:id="reset_flag">
<title>--reset</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option resets the program to its initial state, losing all the
configuration logic that was input to it up to that state. Afterwards,
it can be set to a different configuration, again.</simpara>
</refsection>
<refsection xml:id="read-from-file_flag">
<title>--read-from-file [num_skip,]filename</title>
<simpara><emphasis role="strong">Global</emphasis> (but context-specific).</simpara>
<simpara>This option will read the configuration options from a file. The format
of the file is similar to that used by the UNIX Bourne Shell. (i.e:
spaces denote separate arguments, double-quotes encompass arguments,
backslash escapes characters).</simpara>
<simpara>The filename can be preceded by an optional number of the arguments to
skip followed by a comma. (the default is 0)</simpara>
</refsection>
<refsection xml:id="load-config_flag">
<title>-l [preset] , --load-config [preset]</title>
<simpara><emphasis role="strong">Global</emphasis> (but context-specific).</simpara>
<simpara>Reads the configuration specified by [preset] and configures the solver
accordingly. A preset is a set of command line arguments to be analyzed
in the place of this option. They are read from a set of presetrc files
: one installed system-wide, the other at $HOME/.freecell-solver/presetrc
and the third at the path specified by the FREECELL_SOLVER_PRESETRC
environment variable. You can add more presets at any of these places.
(refer to <link xl:href="http://groups.yahoo.com/group/fc-solve-discuss/message/403">http://groups.yahoo.com/group/fc-solve-discuss/message/403</link>
for information about their format)</simpara>
<simpara>Presets that are shipped with Freecell Solver:</simpara>
<informaltable frame="all" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><literal>abra-kadabra</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>amateur-star</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that yields solutions
faster on average than <literal>three-eighty</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>blue-yonder</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset generated by a
quota optimization algorithm.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>children-playing-ball</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flare-based preset that tends
to yield very short solution, but is very slow (solves only 3 boards per
second on a Pentium 4 2.4GHz).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>conspiracy-theory</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that yields solutions
faster on average than <literal>amateur-star</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cookie-monster</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that yields solutions
faster on average than <literal>one-big-family</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>cool-jives</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>crooked-nose</literal></simpara></entry>
<entry align="left" valign="top"><simpara>an atomic-moves preset (guarantees an
            accurate verdict)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>enlightened-ostrich</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset (that depends on Freecell
Solver 3.4.0 and above) that yields solutions faster on average than
<literal>foss-nessy</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>fools-gold</literal></simpara></entry>
<entry align="left" valign="top"><simpara>an atomic-moves preset</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>foss-nessy</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset (that depends on Freecell
Solver 3.2.0 and above) that yields solutions faster on average than
<literal>the-iglu-cabal</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>good-intentions</literal></simpara></entry>
<entry align="left" valign="top"><simpara>runs "cool-jives" and then "fools-gold"</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>gooey-unknown-thing</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that aims to minimise
            the outcome solution&#8217;s length.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>hello-world</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>john-galt-line</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>looking-glass</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that yields solutions
faster on average than <literal>cookie-monster</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>maliciously-obscure</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flare-based preset that tends
to yield very short solutions (even in comparison to <literal>children-playing-ball</literal>
) but is slow.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>micro-finance</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flare-based preset that tends
to yield very short solutions (even in comparison to <literal>maliciously-obscure</literal>
) but is even slower.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>micro-finance-improved</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flare-based preset, based
on <literal>micro-finance</literal> that yields somewhat shorter solutions on average, and
should not be slower.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>one-big-family</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that yields solutions
faster on average than <literal>conspiracy-theory</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>qualified-seed</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flare-based preset, based
on <literal>micro-finance-improved</literal> that yields somewhat shorter solutions on average,
and should not be slower.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>qualified-seed-improved</literal></simpara></entry>
<entry align="left" valign="top"><simpara><literal>qualified-seed</literal> with <literal>-fif 5</literal> and
<literal>--flares-choice fcpro</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>rin-tin-tin</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>sand-stone</literal></simpara></entry>
<entry align="left" valign="top"><simpara>an atomic-moves preset that aims to
            minimise the outcome solution&#8217;s length.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>slick-rock</literal></simpara></entry>
<entry align="left" valign="top"><simpara>run "gooey-unknown-thing" and then "sand-stone"</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>sentient-pearls</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flares based preset with
short solutions. Much faster than <literal>children-playing-ball</literal> but yields less
optimal solutions.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>tea-for-two</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset optimized for
two-freecells' Freecell games (although it can work on other Freecell-like
games as well).</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>the-iglu-cabal</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset that yields faster
solutions on average than <literal>blue-yonder</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>the-last-mohican</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a preset for solving Simple Simon. Yields
            less false negatives than the default one, but might be slower.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>three-eighty</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset (that depends on Freecell
Solver 3.4.0 and above) that yields solutions faster on average than
<literal>enlightened-ostrich</literal>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>toons-for-twenty-somethings</literal></simpara></entry>
<entry align="left" valign="top"><simpara>an atomic-moves preset that solves
            more boards efficiently than "fools-gold".</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>video-editing</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves and flare-based preset, based
on <literal>qualified-seed</literal> that yields shorter solutions on average, but may be
somewhat slower. Named to commemorate the earlier work of
<link xl:href="http://en.wikipedia.org/wiki/Adrian_Ettlinger">Adrian Ettlinger (1925-2013)</link>
who later contributed to Freecell Solver and to Freecell research.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><literal>yellow-brick-road</literal></simpara></entry>
<entry align="left" valign="top"><simpara>a meta-moves preset</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>They can be abbreviated into their lowercase acronym (i.e: "ak" or "rtt").</simpara>
</refsection>
</refsection>
<refsection xml:id="run-time-display-options">
<title>Run-time Display Options</title>
<refsection xml:id="iter-output_flag">
<title>-i , --iter-output</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option tells fc-solve to print the iteration number and the
recursion depth of every state which is checked, to the standard
output. It&#8217;s a good way to keep track of how it&#8217;s doing, but the output
slows it down a bit.</simpara>
</refsection>
<refsection xml:id="iter-output-step_flag">
<title>--iter-output-step [step]</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>Prints the current iteration if <literal>-i</literal> is specified, only every <literal>[step]</literal>
steps, where <literal>[step]</literal> is a positive integer. For example, if you do
<literal>fc-solve -i --iter-output-step 100</literal>, you will see this:</simpara>
<screen>Iteration: 0
Iteration: 100
Iteration: 200
Iteration: 300</screen>
<simpara>This option has been added in Freecell Solver 4.20.0 and is useful for speeding
up the runtime process, by avoiding excessive output.</simpara>
</refsection>
<refsection xml:id="state-output_flag">
<title>-s , --state-output</title>
<simpara><emphasis role="strong">Global</emphasis></simpara>
<simpara>This option implies -i. If specified, this option outputs the cards and
formation of the board itself, for every state that is checked.
"fc-solve -s" yields a nice real-time display of the progress of
Freecell Solver, but you usually cannot make what is going on because
it is so fast.</simpara>
</refsection>
</refsection>
<refsection xml:id="signal_combinations">
<title>Signal Combinations</title>
<simpara>If you are working on a UNIX or a similar system, then you can set some
run-time options in "fc-solve" by sending it some signal
combinations.</simpara>
<simpara>If you send the fc-solve a single ABRT signal, then fc-solve will terminate
the scan prematurely, and report that the iterationsâ€™s limit has been
exceeded.</simpara>
<simpara>If you send the signal USR1, without sending any other signals before
that, then <literal>fc-solve</literal> will output the present number of
iterations. This method is a good way to monitor an instance that takes
a long time to solve.</simpara>
<simpara>If you send it the signal USR2 and then USR1, then <literal>fc-solve</literal>
will print the iteration number and depth on every state that it
checks. It is the equivalent of specifying (or unspecifying) the
option -i/--iter-output.</simpara>
<simpara>If you send it two USR2 signals and then USR1, then <literal>fc-solve</literal>
will also print the board of every state. Again, this will only be done
assuming the iteration output is turned on.</simpara>
</refsection>
</refentry>